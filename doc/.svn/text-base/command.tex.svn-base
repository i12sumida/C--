% 
% $Id$
%
\chapter{コマンドリファレンス}

UNIX 上で動作する \tac 開発環境のコマンドについて、
使用方法を解説します。

\section{{\tt c--} コマンド}

\verb/c--/ コマンドは \cmml のコンパイラです。
\cmml で記述されたプログラムを入力し、
\tac アセンブリ言語で記述したプログラムに変換します。
\verb/c--/ コマンドの書式は次の通りです。

\begin{flushleft}
{\bf 形式 : }~~~\verb/c-- [<ソースプログラムファイル>]/
\end{flushleft}

引数に \cmml のソースプログラムファイルを指定した場合は
ファイルをオープンし指定されたファイルからソースプログラムを読み込みます。
引数が省略された場合は標準入力ストリームからソースプログラムを読み込みます。
どちらの場合もコンパイル結果は標準出力ストリームに出力します。
ソースプログラムファイルの拡張子は「\verb/.cmm/」にします。

通常、\cl のプリプロセッサと組み合わせて次のように使用します。
コンパイル結果はリダイレクトを用いて拡張子「\verb/.s/」のファイルに出力します。

\begin{mylist}
\begin{verbatim}
$ cpp -std=c99 hello.cmm | c-- > hello.s
\end{verbatim}
\end{mylist}

\cmm コンパイラはプリプロセッサと組み合わせた場合でも、
エラーの発生箇所を正しく報告することができます。
次の例はインクルードファイルの中にエラーがある場合の例です。

\begin{mylist}
\begin{verbatim}
$ cat util.h 
// util.h
void printf(char[] fmt, ...);
a;
$ cat hello.cmm
// hello.cmm
#include "util.h"
void main() {
  printf("hello\n");
}
$ cpp -std=c99 hello.cmm | c-- > hello.s
"util.h": 3 : 型がない
$ 
\end{verbatim}
\end{mylist}

\section{{\tt as--} コマンド}

\verb/as--/コマンドは \tac 用のアセンブラです。
\tac のアセンブリ言語で記述されたプログラムを
\pageref{app:oformat}ページで説明する「\verb/.o/形式ファイル」に変換します。
\verb/as--/には手書きのプログラムを入力することもできますが、
主に、
\cmm コンパイラが出力したアセンブリ言語プログラムを
入力することを想定しています。
そのため、
オペランドにアドレス計算式が書けない等、
\cmm コンパイラが使用しない機能は省略されています。
\verb/as--/コマンドの書式は次の通りです。

\begin{flushleft}
{\bf 形式 : }~~~\verb/as--  <ソースプログラムファイル>/
\end{flushleft}

ソースプログラムファイルの拡張子は「\verb/.s/」でなければなりません。
\verb/as--/コマンドは拡張子が「\verb/.o/」のファイルを作成し、
アセンブル結果の再配置可能な機械語を出力します。
次のように実行すると、``\verb/hello.o/''ファイルが作成されます。

\begin{mylist}
\begin{verbatim}
$ as-- hello.s
\end{verbatim}
\end{mylist}

\section{{\tt ld--} コマンド}

\verb/ld--/コマンドは \tac 用のリンカープログラムです。
\pageref{app:oformat}ページで説明する
「\verb/.o/形式ファイル」を複数入力し、
同じ形式の一つのファイルに結合します。
\verb/ld--/コマンドの書式は次の通りです。
出力ファイルは一つだけ、
入力ファイルはいくつでも指定できます。

\begin{flushleft}
{\bf 形式 : }~~~\verb/ld--  <出力ファイル> <入力ファイル> .../
\end{flushleft}

次のように実行すると``\verb/crt0.o/''、``\verb/util.o/''、``\verb/hello.o/''の
三つのファイルを結合して、``\verb/hello/''ファイルを作成します。
``\verb/hello/''ファイルもリロケータブルオブジェクトなので、
未定義シンボルを含んでいる可能性があります。

\begin{mylist}
\begin{verbatim}
$ ld-- hello crt0.o util.o hello.o
\end{verbatim}
\end{mylist}

\section{{\tt objbin--} コマンド}

\verb/objbin--/コマンドは \tac 用のローダプログラムです。
\pageref{app:oformat}ページで説明する「\verb/.o/形式ファイル」を入力し、
\pageref{app:bformat}ページで説明する「\verb/.bin/形式ファイル」へ変換します。
\verb/objbin--/コマンドの書式は次の通りです。
入力ファイルも出力ファイルも一つだけ指定できます。

\begin{flushleft}
{\bf 形式 : }~~~\verb/objbin--  0xTTTT <出力ファイル> <入力ファイル>  [0xBBBB]/
\end{flushleft}

0xTTTT は16進数でテキストセグメントの先頭アドレスを指定します。
指定した番地からテキストセグメント、データセグメントの順に配置されます。
0xBBBB は16進数でBSSセグメントの先頭アドレスを指定します。
0xBBBB は省略可能です。
省略した場合、BSSセグメントはデータセグメントの直後に配置されます。

下に実行例を示します。
実行例の1行目は``\verb/hello/''ファイルを入力し 0000H 番地に配置した
状態の機械語を作成し``\verb/hello.bin/''ファイルに出力します。
実行例の2行目は``\verb/ipl/''ファイルを入力し F800H 番地に
テキストセグメントとデータセグメントを連続して配置し、
FFE0H 番地に BSSセグメントを配置します。
そして、その状態の機械語を``\verb/ipl.bin/''ファイルに出力します。
なお、この例は実物の IPL を配置する手順です。
\pageref{app:memmap}ページで説明するメモリマップのように、
F800H 番地からの ROM 領域に IPL プログラム、
FFE0H 番地からの RAM 領域に IPL のワークエリアを配置します。

\begin{mylist}
\begin{verbatim}
$ objbin-- 0x0000 hello.bin hello
$ objbin-- 0xf800 ipl.bin ipl 0xffe0
\end{verbatim}
\end{mylist}

\verb/objbin--/コマンドは、固定番地に配置された完全な機械語を作成します。
``\verb/hello/''ファイルや``\verb/ipl/''ファイルに未定義シンボルが
含まれていると完全な機械語に変換できないのでエラーが発生します。
次の実行例はエラーが発生する例です。
実行例のエラーメッセージは、
``\verb/kernel.s/''ファイル中で参照された \verb/_printf/
と言うシンボルが未定義であることを表しています。

\begin{mylist}
\begin{verbatim}
$ objbin-- 0x0000 kernel kernel.o
_printf[kernel.s]:未定義シンボル
$
\end{verbatim}
\end{mylist}


\section{{\tt size--} コマンド}

\verb/size--/コマンドは
\pageref{app:oformat}ページで説明する「\verb/.o/形式ファイル」を入力し、
テキスト、データ、BSSセグメントのサイズを表示します。

\begin{flushleft}
{\bf 形式 : }~~~\verb/size--  <入力ファイル>/
\end{flushleft}

次のように実行します。
``\verb/kernel/''ファイルの各セグメントと全体のサイズが
10進数と16進数で表示されています。

\begin{mylist}
\begin{verbatim}
$ size-- kernel
text   data   bss    dec    filename
 2072      5     52   2129  kernel
(0818) (0005) (0034) (0851) (hex)
$
\end{verbatim}
\end{mylist}
