% 
% $Id$
%
\chapter{はじめに}

%\section{\cmm の特徴}
\cmml は \cl に似た小さなシステム記述用言語です。
徳山高専教育用 PC(\tac) のシステム記述用言語として開発されました。
\cmml は次に挙げる項目を満たすことを目標に設計されています。

\begin{description}
\item[「学習が容易な言語であること」]
\cmml は \cl をお手本にしていますが、
\cl の難しい部分を取り去り簡単に理解できるようになっています。
まず、無くても我慢できそうな文法は、思い切り良く省略しています。
例えば、\cl では多次元配列の形式にいくつかのレパートリーがありました。
しかし、Java 言語にはレパートリーはありません。
\cmml は Java 言語に倣い多次元配列のレパートリーを認めません。

また、\cl の混乱を招きそうな文法仕様を取り入れないように注意しています。
例えば、\cl の配列は関数に渡されるとポインタとして扱われます。
つまり、関数に渡すと型が変化してしまいます。
このような仕様は、初心者が言語を学習する場合に混乱を招きます。
\cmml は Java の参照の考えかたを取り入れ、
配列は一貫して参照型として取り扱われます。

その他にも、\cl の難しい文法を取り去る工夫をしてあります。
Java 言語と似た仕様にすることにより、
Java 言語でプログラミングの入門をした人が学習しやすくなっています。

\item[「実用的なシステム記述言語であること」]
\cmml は \tac のシステム記述言語として、
\tac の OS や \cmm コンパイラを記述することを目標にしています。
そのため、無闇に文法を簡単化すること無く、
実用的に使用するために必要な文法は残してあります。
例えば、制御文は{\tt if}、{\tt while}、{\tt for}、{\tt do-while}、
{\tt return}、{\tt break}、{\tt continue} 等が一通り準備されています。

また、なるべく効率の良いオブジェクトコードを出力する努力をしています。

\item[「\tac 上で実行可能なこと」]
最終的に \tac 上でセルフ開発環境を構築することを目標としています。
\cmm コンパイラは、セルフ開発環境の中核になるコンポーネントです。
そこで、\cmm コンパイラは \tac の限られた主記憶(64kW)で実行できるように
メモリを節約するような設計がされています。
コンパイラのプログラムが小さいこともそうですが、
単一の名前表で変数、関数、
構造体を管理する等してデータ構造も小さくするようにしています。

\item[「コンパイラを教材として使用できること」]
\cmm コンパイラは、高専や大学の学生が、
コンパイラの教材として使用することを想定して開発されました。
そのため、コンパイラがコンパクトに記述でき、
コンパイラのソースコードを学生が読めることも目標になっています。
2009年4月現在の \cmm コンパイラは \cl で 1,700 行程度で記述されています。

\end{description}
